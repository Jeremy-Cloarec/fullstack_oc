QU'EST CE QUE NODE ?

Node est le runtime qui permet d'écrire nos tâche cot serveur, en JS, tel que : 

- la logique métier
- la persistance des données
- la sécurité
- ajoute des fonctionnalité que le js du navigateur standard ne possède pas: ex accès au système de fichier local. 

Express est un framework reposant sur Node qui facilite la création et la gestion des serveurs Nodes. 

INITIALISER VOTRE PROJET

npm init : génère un fichier package.json

DÉMARRER UN SERVEUR 

On importe le package natif de Node HTTP et on l'utilise dans le fichier server.js : on lui passe une fonction qui sera exécutée à chaque appel effectué vers ce server.

Cette fonction reçoit les objets request et response en tant qu'argument. On utilise la méthode end de la réponse pour renvoyer une réponse de type string ("Voilà la réponse  du serveur")

NODEMON

node server => nodemon server

EXPRESS 

AJOUTER DES MIDDLEWARES

Une application Express est une série de fonctions appelées middleware. Chaque élément de middleware reçoit les objet request et response. Aussi la métode next qui permet de passe au middleware suivant. 

normalizePort : renvoie un port valide ; 
errorHandler : recherche les différentes erreurs et les gère de manière appropiées. Elle est ensuite enregistrée dans le serveur.

CREER UNE ROUTE GET

200 : reponse réussie
201 : création de ressource

ERREURS DE CORS

Cross Origin Ressources Sharing : systeme de sécurité qui par défaut bloque les appels HTTP entre des serveurs différents. 

Pour l'autoriser il faut ajouter des header à notre objet response. 

REQUETES POST 

Pour gérer la requête POST venant de lapplication front, on a besoin d'en extraire le corps JSON. 
app.use(express.json()); => Express prend toutes les requêtes qui ont comme Content-Type application/json et met à dispo leur body directement sur l'objet req. Ce qui permet d'écrire : 

    app.post('/api/stuff', (req, res, next) => {
        console.log(req.body);
        res.status(201).json({
            message: 'Objet créé !'
        });
    });

-----------------------------------------------
-----------------------------------------------
CONFIGURER VOTRTE BDD--------------------------
-----------------------------------------------
-----------------------------------------------

BDD SQL

Structured Query language : bdd relationnelle. Organise ses données dans des tables selon des schémas strictes. En gl, chaque table a un identifiant. On peut par ex faire redf à un l'id user dans une autre table.  

Adaptées pour des données où des définitins fortes sont nécessaires. NoSql : pratique pour intégrer un  grand nombre d'élément. 

MONGO DB

On ne peux pas utiliser SQL pour communiquer avec MongoDB. Les données sont stockées comme des collections de documents individuels décrits en JSON. Il n' y a pas de schéma stricte de données. Il n'y a pas de relation concrète entre les différentes données. 
Avantage : évolutivité et flexibilité. Facilité ave laquelle on communique avec JScript avec les documents écrit en JSON. 

MONGOOSE 

package qui facilite les intéraction avec la bdd. Il permet de : 
> Valider le format de données
> Gérer les reations entre les documents
> Coommuniquer direct avec la bdd pour la lecture et l'écriture des documents. 

CREER UN SCHEMA DE DONNEES

Possibilité d'implémenter des schéma de données
> rend l'application plus robuste et plus stable

La méthode  Schema  de Mongoose vous permet de créer un schéma de données pour votre base de données MongoDB.
La méthode  model  transforme ce modèle en un modèle utilisable.

Shéma contient les champs souhaitéspour chaque Thing. On indique leur type ainsi que leur caractère. L'id est généré automatiquement par Mongoose. 

ENREGISTRER ET RECUPERER DES DONNEES

On crée une instance du modèle thing en lui passant un objet JS contenant toutes les infos requises du corps de requête analysé en ayant supprimé en amont le faux id_ envoyé par le front end. 

L'opérateur spread ... est utilisé pour faire une copie de tous les éléments de req.body

Comporte une methode save() qui enregistre Things dans la bdd. 

Récupération d'un Thing spécifique

:id : rend le séguement de la route accessible en tant que paramètre

Méthode findOne() : trouver le Thing unique ayant le même _id que le paramètre de la requête. 
Ce Thing est ensuite retourné dans une promise et enoyé au front. Si aucun Thing n'est trouvé, on envoie une erreur 404. 


-----------------------------------------------
-----------------------------------------------
MODIFIER ET SUPPRIMER DES DONNEES--------------
-----------------------------------------------
-----------------------------------------------


Methode updateOne()
Méthode deleteOne()





